With all the test passing, the code is not optimized for large scale operations.
Looking at the Anagrams model, we can do a good bit of the work when storing a word.
That way we do not have to get the letter counts of each word everytime.

So step one - store the letter counts in the Word object.

Next - we need to be able to send a query to the db to find words that match the letter counts of the existing word

What if we created a special "KEY" that was the same for words with matching letter counts then indexed on this key
We would then only need to get the "KEY" of the new word and find words with that matching key!

Proposal
The key is simply
["a1b4o3z2"]

where we have the letter then the count for each one, concatenated in a string

Requirement: THE LETTER ORDER MUST BE THE SAME EACH TIME

See the branch - analayze-anagram

+++Stats
Okay now onto stats
Looking at this we have alot of records and recalculating over the entire data set is time intensive but not unmanageable,
however we could at fields that can help us alot. If we have a field on the Word object that indicates the word.length,
we could use this to help in our statistics gathering.
If we stored a summary/rollup of the data based on word lengths we should have all the data to easily to calculations.
We could then run these calculations quite quickly in realtime without tying up the Word table.
Only thing is the freshness of the data -> what if someone adds/deletes a word during the calculation


++++++Proper nouns
To aid in this if we add a flag on each word to indicate it is a proper noun, and add an index on this, we could add this
query to support. A propernoun being where the first letter is in Caps

